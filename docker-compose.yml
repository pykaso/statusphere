version: '3.8'

services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: statusphere_user
      POSTGRES_PASSWORD: statusphere_password
      POSTGRES_DB: statusphere_db
    ports:
      - "5432:5432"
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U statusphere_user -d statusphere_db"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

  scraper:
    build:
      context: ./
      dockerfile: ./scraper/Dockerfile
    environment:
      STATUSPHERE_POSTGRES_HOST: postgres
      STATUSPHERE_POSTGRES_PORT: 5432
      STATUSPHERE_POSTGRES_USER: statusphere_user
      STATUSPHERE_POSTGRES_PASSWORD: statusphere_password
      STATUSPHERE_POSTGRES_DATABASE: statusphere_db
    depends_on:
      - postgres
        # condition: service_healthy

  apiserver:
    build:
      context: ./
      dockerfile: ./apiserver/Dockerfile
    ports:
      - "8888:8888"
    environment:
      STATUSPHERE_POSTGRES_HOST: postgres
      STATUSPHERE_POSTGRES_PORT: 5432
      STATUSPHERE_POSTGRES_USER: statusphere_user
      STATUSPHERE_POSTGRES_PASSWORD: statusphere_password
      STATUSPHERE_POSTGRES_DATABASE: statusphere_db
    depends_on:
      - postgres
        # condition: service_healthy

  jobrunner:
    build:
      context: ./
      dockerfile: ./jobrunner/Dockerfile
    environment:
      STATUSPHERE_POSTGRES_HOST: postgres
      STATUSPHERE_POSTGRES_PORT: 5432
      STATUSPHERE_POSTGRES_USER: statusphere_user
      STATUSPHERE_POSTGRES_PASSWORD: statusphere_password
      STATUSPHERE_POSTGRES_DATABASE: statusphere_db
    depends_on:
      - postgres
        # condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    environment:
      NEXT_PUBLIC_REACT_APP_API_URL: "http://apiserver:8888"
    profiles: ["frontend"]
    ports:
      - "80:3000"
    depends_on:
      - apiserver
